Index: accounts/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect, get_object_or_404\r\nfrom .forms import RegistrationForm, UserForm, UserProfileForm\r\nfrom .models import Account, UserProfile\r\nfrom orders.models import Order,OrderProduct\r\nfrom orders.models import Order\r\nfrom django.contrib import messages, auth\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.http import HttpResponse\r\n\r\n# Verification email\r\nfrom django.contrib.sites.shortcuts import get_current_site\r\nfrom django.template.loader import render_to_string\r\nfrom django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode\r\nfrom django.utils.encoding import force_bytes\r\nfrom django.contrib.auth.tokens import default_token_generator\r\nfrom django.core.mail import EmailMessage\r\n\r\nfrom carts.views import _cart_id\r\nfrom carts.models import Cart, CartItem\r\nimport requests\r\n# Create your views here.\r\n\r\n\r\ndef register(request):\r\n    if request.method == 'POST':\r\n        form = RegistrationForm(request.POST)\r\n        if form.is_valid():\r\n            first_name = form.cleaned_data['first_name']\r\n            last_name = form.cleaned_data['last_name']\r\n            phone_number = form.cleaned_data['phone_number']\r\n            email = form.cleaned_data['email']\r\n            password = form.cleaned_data['password']\r\n            username = email.split(\"@\")[0]  # If two clients have the same name but differnet email domains can mess things up.\r\n            user = Account.objects.create_user(first_name=first_name, last_name=last_name,\r\n                                               email=email, username=username, password=password)\r\n            user.phone_number = phone_number\r\n            user.save()\r\n\r\n            # Create user profile\r\n            profile = UserProfile() # Creates profile object\r\n            profile.user_id = user.id\r\n            profile.profile_picture = 'default/default-user.png' # Default profile picture from media folder\r\n            profile.save()\r\n\r\n            # USER ACTIVATION\r\n            current_site = get_current_site(request)\r\n            mail_subject = 'Please activate your account'\r\n            message = render_to_string('accounts/account_verification_email.html',{\r\n                'user': user, # user is the user object to type user.first_name etc. in the email template.\r\n                'domain': current_site,\r\n                'uid': urlsafe_base64_encode(force_bytes(user.pk)), #encoding the user ID so nobody can see the primary key.\r\n                'token': default_token_generator.make_token(user), #default_token_generator is a library and it will create a unique token for that particular user\r\n            })\r\n            to_email = email #the email address we send the email to, we get it from the form above\r\n            send_email = EmailMessage(mail_subject, message, to=[to_email])\r\n            send_email.send()\r\n\r\n            # messages.success(request,'Thank you for registering with us. We have sent you an email to verify your email!')\r\n            return redirect('/accounts/login/?command=verification&email='+email)\r\n    else:\r\n        form = RegistrationForm()\r\n    context = {\r\n        'form': form,\r\n    }\r\n    return render(request, 'accounts/register.html', context)\r\n\r\n\r\ndef login(request):\r\n    if request.method == 'POST':\r\n        email = request.POST['email']\r\n        password = request.POST['password']\r\n\r\n        user = auth.authenticate(email=email,password=password)\r\n\r\n        if user is not None:\r\n            try:\r\n                cart = Cart.objects.get(cart_id=_cart_id(request))\r\n                is_cart_item_exists = CartItem.objects.filter(cart=cart).exists()\r\n                if is_cart_item_exists:\r\n                    cart_item = CartItem.objects.filter(cart=cart) # Look at items inside that particular cart id\r\n\r\n                    # To group things when login in with the previous cart items saved before\r\n                    # Getting product variation by cart it\r\n                    product_variation = []\r\n                    for item in cart_item:\r\n                        variation = item.variations.all()\r\n                        product_variation.append(list(variation))\r\n\r\n                    # Get the cart items from the user to access his product variations\r\n                    cart_item = CartItem.objects.filter(user=user)\r\n                    ex_var_list = []  # existing variations list\r\n                    id = []\r\n                    for item in cart_item:\r\n                        existing_variation = item.variations.all()\r\n                        ex_var_list.append(list(existing_variation))\r\n                        id.append(item.id)\r\n\r\n                    for pr in product_variation: #Get common product variation\r\n                        if pr in ex_var_list:\r\n                            index = ex_var_list.index(pr)\r\n                            item_id = id[index]\r\n                            item = CartItem.objects.get(id=item_id)\r\n                            item.quantity += 1\r\n                            item.user = user\r\n                            item.save()\r\n                        else:\r\n                            cart_item = CartItem.objects.filter(cart=cart)\r\n                            for item in cart_item:\r\n                                item.user = user\r\n                                item.save()\r\n\r\n            except:\r\n                pass\r\n            auth.login(request, user)\r\n            messages.success(request, 'You are now logged in.')\r\n            url = request.META.get('HTTP_REFERER') #Takes the previous url from where you came\r\n            try:\r\n                query = requests.utils.urlparse(url).query\r\n                # next=/cart/checkout\r\n                params = dict(x.split('=') for x in query.split('&'))\r\n                if 'next' in params:\r\n                    nextPage = params['next']\r\n                    return redirect(nextPage)\r\n            except:\r\n                return redirect('dashboard')\r\n        else:\r\n            messages.error(request,'Invalid login credentials')\r\n            return redirect('login')\r\n\r\n    return render(request, 'accounts/login.html')\r\n\r\n@login_required(login_url = 'login')\r\ndef logout(request):\r\n    auth.logout(request)\r\n    messages.success(request, 'You are logged out!')\r\n    return redirect('login')\r\n\r\n\r\ndef activate(request, uidb64, token):\r\n    try:\r\n        uid = urlsafe_base64_decode(uidb64).decode() #Decode the uidb64\r\n        user = Account._default_manager.get(pk=uid)\r\n    except(TypeError,ValueError,OverflowError,Account.DoesNotExist):\r\n        user = None\r\n\r\n    if user is not None and default_token_generator.check_token(user, token):\r\n        user.is_active = True\r\n        user.save()\r\n        messages.success(request, 'Congratulations! Your account is activated')\r\n        return redirect('login')\r\n    else:\r\n        messages.error(request, 'Invalid activation link')\r\n        return redirect('register')\r\n\r\n@login_required(login_url='login')\r\ndef dashboard(request):\r\n    orders = Order.objects.order_by('-created_at').filter(user_id=request.user.id,is_ordered=True)\r\n    orders_count = orders.count()\r\n\r\n    userprofile = UserProfile.objects.get(user_id=request.user.id)\r\n    \r\n    context = {\r\n        'orders_count': orders_count,\r\n        'userprofile': userprofile,\r\n    }\r\n\r\n    return render(request, 'accounts/dashboard.html', context=context)\r\n\r\n\r\ndef forgotPassword(request):\r\n    if request.method == 'POST':\r\n        email = request.POST['email']\r\n        if Account.objects.filter(email=email).exists():\r\n            user = Account.objects.get(email__exact=email)\r\n\r\n            # Reset password email\r\n            current_site = get_current_site(request)\r\n            mail_subject = 'Please reset your password'\r\n            message = render_to_string('accounts/reset_password_email.html',{\r\n                'user': user, # user is the user object to type user.first_name etc. in the email template.\r\n                'domain': current_site,\r\n                'uid': urlsafe_base64_encode(force_bytes(user.pk)), #encoding the user ID so nobody can see the primary key.\r\n                'token': default_token_generator.make_token(user), #default_token_generator is a library and it will create a unique token for that particular user\r\n            })\r\n            to_email = email\r\n            send_email = EmailMessage(mail_subject, message, to=[to_email])\r\n            send_email.send()\r\n\r\n            messages.success(request,'Password reset email has been delivered to your email address.')\r\n            return redirect('login')\r\n\r\n        else:\r\n            messages.error(request,'Account does not exist')\r\n            return redirect('forgotPassword')\r\n    return render(request, 'accounts/forgotPassword.html')\r\n\r\n\r\ndef resetpassword_validate(request, uidb64, token):\r\n    try:\r\n        uid = urlsafe_base64_decode(uidb64).decode() #Decode the uidb64\r\n        user = Account._default_manager.get(pk=uid)\r\n    except(TypeError,ValueError,OverflowError,Account.DoesNotExist):\r\n        user = None\r\n\r\n    if user is not None and default_token_generator.check_token(user, token):\r\n        request.session['uid'] = uid\r\n        messages.success(request, 'Please reset your password')\r\n        return redirect('resetPassword')\r\n    else:\r\n        messages.error(request, 'This link has been expired')\r\n        return redirect('login')\r\n\r\n\r\ndef resetPassword(request):\r\n    if request.method == 'POST':\r\n        password = request.POST['password']\r\n        confirm_password = request.POST['confirm_password']\r\n\r\n        if password == confirm_password:\r\n            uid = request.session.get('uid')\r\n            user = Account.objects.get(pk=uid)\r\n            user.set_password(password) # We need to do it with set_password command, not just saving. Set_password is a django function which also hashes it.\r\n            user.save()\r\n            messages.success(request,'Password reset successfully.')\r\n            return redirect('login')\r\n        else:\r\n            messages.error(request,'Password do not match')\r\n            return redirect('resetPassword')\r\n    else:\r\n        return render(request,'accounts/resetPassword.html')\r\n\r\n\r\n@login_required(login_url='login')\r\ndef my_orders(request):\r\n    orders = Order.objects.filter(user=request.user, is_ordered=True).order_by('-created_at')\r\n    context = {\r\n        'orders': orders,\r\n    }\r\n    return render(request, 'accounts/my_orders.html', context=context)\r\n\r\n\r\n@login_required(login_url='login')\r\ndef edit_profile(request):\r\n    userprofile = get_object_or_404(UserProfile, user=request.user)\r\n    if request.method == 'POST':\r\n        user_form = UserForm(request.POST, instance=request.user) #Instance because we want to update the user profile but not creating a new one.\r\n        profile_form = UserProfileForm(request.POST, request.FILES, instance=userprofile)  #Passing request.FILES as the photo can be updated too.\r\n        if user_form.is_valid() and profile_form.is_valid():\r\n            user_form.save()\r\n            profile_form.save()\r\n            messages.success(request,'Your profile has been updated.')\r\n            return redirect('edit_profile')\r\n    else:\r\n        user_form = UserForm(instance=request.user) #we cannot pass the request post because it is not a post request. Instance we can see the existing data in the profile\r\n        profile_form = UserProfileForm(instance=userprofile)\r\n\r\n    context = {'user_form': user_form, 'profile_form': profile_form,'userprofile':userprofile,}\r\n    return render(request, 'accounts/edit_profile.html', context)\r\n\r\n\r\n@login_required(login_url='login')\r\ndef change_password(request):\r\n    if request.method == 'POST':\r\n        current_password = request.POST['current_password']\r\n        new_password = request.POST['new_password']\r\n        confirm_password = request.POST['confirm_password']\r\n\r\n        user = Account.objects.get(username__exact=request.user.username)\r\n\r\n        if new_password == confirm_password:\r\n            success = user.check_password(current_password) #Check the password is correct or suitable for the system\r\n            if success:\r\n                user.set_password(new_password) #save password and hash it so nobody can read it.\r\n                user.save()\r\n                # auth.Logout(request) it would log out the user and redirect to sign in in case we wanted this.\r\n                messages.success(request, 'Password updated successfully.')\r\n                return redirect('change_password')\r\n            else:\r\n                messages.error(request,'Please enter valid current password')\r\n        else:\r\n            messages.error(request,'Proposed password does not match.')\r\n            return redirect('change_password')\r\n\r\n    return render(request, 'accounts/change_password.html')\r\n\r\n@login_required(login_url='login')\r\ndef order_detail(request, order_id):\r\n    order_detail = OrderProduct.objects.filter(order__order_number=order_id) #This underscore underscore access the fields of the foreign key model. So order_number in order model as order is the foreign key in the OrderProduct model.\r\n    order = Order.objects.get(order_number=order_id)\r\n\r\n    subtotal = 0\r\n    for i in range(len(order_detail.all())):\r\n        subtotal = subtotal + (order_detail[i].quantity * order_detail[i].product_price)\r\n\r\n    total_tax = subtotal * 0.02\r\n\r\n    context = {\r\n        'order_detail': order_detail,\r\n        'order': order,\r\n        'subtotal': subtotal,\r\n        'total_tax': total_tax,\r\n    }\r\n    return render(request,'accounts/order_detail.html', context)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/accounts/views.py b/accounts/views.py
--- a/accounts/views.py	(revision 029275bd3bd648b0d23aab3aa2ec9b363d89b168)
+++ b/accounts/views.py	(date 1669320270662)
@@ -158,7 +158,7 @@
     orders_count = orders.count()
 
     userprofile = UserProfile.objects.get(user_id=request.user.id)
-    
+
     context = {
         'orders_count': orders_count,
         'userprofile': userprofile,
